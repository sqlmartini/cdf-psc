/******************************************
6. Firewall rules creation
 *****************************************/

resource "google_compute_firewall" "allow_intra_snet_ingress_to_any" {
  project   = local.project_id 
  name      = "allow-intra-snet-ingress-to-any"
  network   = local.vpc_nm
  direction = "INGRESS"
  source_ranges = [local.spark_subnet_cidr]
  allow {
    protocol = "all"
  }
  description        = "Creates firewall rule to allow ingress from within Spark subnet on all ports, all protocols"
  depends_on = [module.vpc_creation]
}

/******************************************
7. Private IP allocation for Data Fusion
 *****************************************/

resource "google_compute_global_address" "private_ip_alloc" {
  name          = "datafusion-ip-alloc"
  project       = local.project_id 
  address_type  = "INTERNAL"
  purpose       = "VPC_PEERING"
  prefix_length = 22
  network       = module.vpc_creation.network_id
  depends_on = [module.vpc_creation]
}

/*******************************************
Introducing sleep to minimize errors from
dependencies having not completed
********************************************/
resource "time_sleep" "sleep_after_network_and_firewall_creation" {
  create_duration = "120s"
  depends_on = [
    module.vpc_creation,
    google_compute_firewall.allow_intra_snet_ingress_to_any,
    google_compute_global_address.private_ip_alloc
  ]
}

/******************************************
8a. Data Fusion instance creation
 *****************************************/

resource "google_data_fusion_instance" "create_instance" {
  name                          = local.cdf_name
  region                        = local.location
  type                          = local.cdf_version
  enable_stackdriver_logging    = true
  enable_stackdriver_monitoring = true
  private_instance              = true
  network_config {
    network                     = local.vpc_nm
    ip_allocation               = "${google_compute_global_address.private_ip_alloc.address}/22"
  }    
  version                       = local.cdf_release
  dataproc_service_account      = local.umsa_fqn
  project                       = var.project_id
  depends_on = [time_sleep.sleep_after_network_and_firewall_creation]
}

/******************************************
8b. Create a peering connection between Data Fusion tenant VPC and Dataproc VPC
 *****************************************/

resource "google_compute_network_peering" "cdf-peering" {
  name         = "cdf-peering"
  network      = module.vpc_creation.network_self_link
  peer_network = "https://www.googleapis.com/compute/v1/projects/${google_data_fusion_instance.create_instance.tenant_project_id}/global/networks/${local.location}-${local.cdf_name}"
  depends_on = [google_data_fusion_instance.create_instance]
}

/******************************************
9. BigQuery dataset creation
******************************************/

resource "google_bigquery_dataset" "bq_dataset_creation" {
  dataset_id                  = local.bq_datamart_ds
  location                    = "US"
  project                     = local.project_id  
}

/******************************************
10. Cloud SQL instance creation
******************************************/

module "sql-db_private_service_access" {
  source        = "terraform-google-modules/sql-db/google//modules/private_service_access"
  project_id    = local.project_id
  vpc_network   = local.vpc_nm
  depends_on = [ 
        time_sleep.sleep_after_network_and_firewall_creation
   ]  
}

module "sql-db_mssql" {
  source            = "terraform-google-modules/sql-db/google//modules/mssql"
  name              = local.project_id
  project_id        = local.project_id
  region            = local.location  
  availability_type = "ZONAL"
  database_version  = "SQLSERVER_2022_STANDARD"
  disk_size         = 100
  root_password     = "P@ssword@111"
  ip_configuration  = {
    "allocated_ip_range": null,
    "authorized_networks": [],
    "ipv4_enabled": true,
    "private_network": module.vpc_creation.network_id,
    "require_ssl": true
    }
  depends_on = [module.sql-db_private_service_access]
}

#Storage bucket for SQL Server backup file
resource "google_storage_bucket" "cloudsql_bucket_creation" {
  project                           = local.project_id 
  name                              = local.cloudsql_bucket_nm
  location                          = local.location
  uniform_bucket_level_access       = true
  force_destroy                     = true
  depends_on = [module.sql-db_private_service_access]
}

#Grant Cloud SQL service account access to import backup from cloud storage
resource "google_storage_bucket_iam_member" "member" {
  bucket = google_storage_bucket.cloudsql_bucket_creation.name
  role   = "roles/storage.objectAdmin"
  member = "serviceAccount:${module.sql-db_mssql.instance_service_account_email_address}"
  depends_on = [module.sql-db_mssql]
}

/******************************************
11. Enable private CDF to access private Cloud SQL
******************************************/

#Create firewall rule to CDF ingress traffic
resource "google_compute_firewall" "allow_private_cdf" {
  project   = local.project_id 
  name      = "allow-private-cdf"
  network   = local.vpc_nm
  direction = "INGRESS"
  source_ranges = ["${google_compute_global_address.private_ip_alloc.address}/22"]
  allow {
    protocol = "tcp"
    ports    = ["22", "1433"] 
  }
  description        = "Creates firewall rule to allow ingress from private CDF from port 22 and 1433 (SQL Server)"
  depends_on = [
    google_compute_global_address.private_ip_alloc,
    google_data_fusion_instance.create_instance
  ]
}

#Create static internal IP for VM
module "sql_proxy_address" {
  source     = "terraform-google-modules/address/google"
  version    = "~> 3.1"
  project_id = local.project_id
  region     = local.location
  subnetwork = local.compute_subnet_nm
  names      = ["sql-proxy-ip"]
  depends_on = [
    module.vpc_creation,
    google_data_fusion_instance.create_instance
  ]
}

#Create SQL proxy VM
resource "google_compute_instance" "sql-proxy" {
  name         = "sql-proxy"
  project      = local.project_id 
  machine_type = "g1-small"
  zone         = "us-central1-a"
  boot_disk {
    initialize_params {
      image = "cos-cloud/cos-stable-109-17800-66-27"
    }
  }
  network_interface {
    subnetwork = local.compute_subnet_nm    
    subnetwork_project = local.project_id
    network_ip = tolist(module.sql_proxy_address.addresses)[0] 
    access_config {}
  }
  service_account {
    email  = local.umsa_fqn
    scopes = ["cloud-platform"]
  }
  scheduling {
    on_host_maintenance = "MIGRATE"
  }
  metadata = {
    startup-script = "docker run -d -p 0.0.0.0:1433:1433 gcr.io/cloudsql-docker/gce-proxy:latest /cloud_sql_proxy -instances=${local.project_id}:${local.location}:${local.project_id}=tcp:0.0.0.0:1433"
  }
  depends_on = [module.sql_proxy_address]
}

#Output static IP for JDBC connection
output "sql_proxy_ip" {
  value = tolist(module.sql_proxy_address.addresses)[0]
}

/******************************************
DONE
******************************************/